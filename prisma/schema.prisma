datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  // Airbnb related fields
  listings      Listing[]    // Properties user has listed as host
  bookings      Booking[]    // Bookings made by user as guest
  reviews       Review[]     // Reviews written by user
  

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Listing {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Host relationship
  hostId      String   @db.ObjectId
  host        User     @relation(fields: [hostId], references: [id])

  // Location
  locationValue String
  address      String
  city         String
  state        String
  country      String
  zipCode      String
  latitude     Float
  longitude    Float

  // Property details
  category        String
  roomCount       Int
  bathroomCount   Int
  guestCount      Int
  price           Float
  propertyType    String    // Apartment, House, Room, etc.

  // Features
  amenities       String[]
  imageUrls       String[]
  houseRules      String[]

  // Availability
  availableFrom   DateTime?
  availableTo     DateTime?

  // Relationships
  bookings        Booking[]
  reviews         Review[]

  // Metrics
  averageRating   Float     @default(0)

  @@index([hostId])
  @@index([locationValue])
}


model Booking {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Dates
  startDate   DateTime
  endDate     DateTime
  
  // Listing relationship
  listingId   String   @db.ObjectId
  listing     Listing  @relation(fields: [listingId], references: [id])
  
  // Guest relationship
  guestId     String   @db.ObjectId
  guest       User     @relation(fields: [guestId], references: [id])
  
  // Booking details

  guestCount  Int
  status      String   // pending, confirmed, cancelled, completed
  
  // Payment
  paymentStatus String  // pending, paid, refunded
  
  // Related reviews
  review      Review?

  @@index([listingId])
  @@index([guestId])
}

model Review {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now())
  
  // Rating and comment
  rating      Float
  comment     String
  
  // Relationships
  listingId   String   @db.ObjectId
  listing     Listing  @relation(fields: [listingId], references: [id])
  
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  
  bookingId   String   @unique @db.ObjectId
  booking     Booking  @relation(fields: [bookingId], references: [id])

  @@index([listingId])
  @@index([userId])
}



 
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}
 
